---
import { Image } from "astro:assets";
import ArrowIcon from "./icons/ArrowIcon.astro";
import type { ImageMetadata } from "astro";

interface Props {
  images: (() => Promise<{
    default: ImageMetadata;
  }>)[];
}

const { images: matterImages } = Astro.props,
  images = await Promise.all(
    matterImages.map(async (image) => (await image()).default.src)
  );
---

<style>
  .active-crumb {
    @apply w-4 h-4 opacity-100;
  }

  .inactive-crumb {
    @apply w-3 h-3 opacity-50;
  }

  .arrow-left {
    @apply w-full h-full absolute top-0 transition-all duration-700 block lg:hidden opacity-10 group-hover:opacity-50;
    background: linear-gradient(
      to right,
      rgba(0, 0, 0, 0.65) 0px,
      rgba(0, 0, 0, 0) 100%
    );
  }

  .arrow-right {
    @apply w-full h-full absolute top-0 transition-all duration-700 block lg:hidden opacity-10 group-hover:opacity-50;
    background: linear-gradient(
      to left,
      rgba(0, 0, 0, 0.65) 0px,
      rgba(0, 0, 0, 0) 100%
    );
  }
</style>

<image-carousel data-images={images.map((image) => image)}>
  <section class="mt-8" aria-label="Image carousel">
    <div aria-label="Preview images for project" class="relative group lg:flex lg:items-center lg:justify-around" id="carousel">
      <button id="previous-image" class="h-full absolute lg:relative left-0" aria-label="Previous Image">
        <span class="arrow-left"></span>
        <ArrowIcon direction="-rotate-90" />
      </button>
      <Image class="lg:w-[78%]" id="thumbnail" src={matterImages[0]()} alt="Project preview 1" />
      <button class="h-full absolute lg:relative right-0 top-0" id="next-image" aria-label="Next Image">
        <span class="arrow-right"></span>
        <ArrowIcon direction="rotate-90" />
      </button>
    </div>

    <nav aria-label="Image Carousel Indicators" class="flex justify-center w-full">
      <ul class="flex w-max overflow-x-auto gap-4 py-4 px-1 items-center">
        {images.map((_, i) => (
          <li class="grid">
            <button
              id={`image-${i}`}
              class={`${!i ? "active-crumb" : "inactive-crumb"} bg-gray-300 rounded-full flex-none`}
              data-index={i}
              aria-label={`Image ${i + 1}`}
            ></button>
          </li>
        ))}
      </ul>
    </nav>
  </section>
</image-carousel>

<script type="text/partytown">
  class ImageCarousel extends HTMLElement {
    constructor() {
      super();
      let index = 0;

      const nextButton = this.querySelector("#next-image"),
        thumbnail = this.querySelector("#thumbnail"),
        images = (this.dataset.images || "[]").split(","),
        previousButton = this.querySelector("#previous-image"),
        indicators = Array.from(this.querySelectorAll("[data-index]"))

      const updateIndicators = (newIndex, updateImage) => {
        const newIndicator = this.querySelector(`#image-${newIndex}`),
          currentIndicator = this.querySelector(`#image-${index}`)

        if (updateImage) thumbnail?.setAttribute("src", images[newIndex]);

        currentIndicator?.classList.toggle("active-crumb")
        currentIndicator?.classList.add("inactive-crumb")

        newIndicator?.classList.toggle("inactive-crumb")
        newIndicator?.classList.add("active-crumb")
      }

      nextButton?.addEventListener("click", () => {
        const newIndex = index === images.length - 1 ? 0 : index + 1
        updateIndicators(newIndex);

        index = newIndex;

        thumbnail?.setAttribute("src", images[index]);
      });

      previousButton?.addEventListener("click", () => {
        const newIndex = !index ? images.length - 1 : index - 1;
        updateIndicators(newIndex);

        index = newIndex;

        thumbnail?.setAttribute("src", images[index]);
      });

      indicators.forEach((indicator, i) => {
        indicator.addEventListener("click", () => updateIndicators(i, true))
      });
    }
  }

  customElements.define("image-carousel", ImageCarousel);
</script>
