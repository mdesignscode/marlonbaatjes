---
import type { ImageMetadata } from "astro";
import RootLayout from "@layouts/RootLayout.astro";
import allProjects from "@src/allProjects";
import ImageCarousel from "@components/ImageCarousel.astro";
import ExternalLinkIcon from "@icons/ExternalLinkIcon.astro";
import GithubIcon from "@components/icons/GithubIcon.astro";

export async function getStaticPaths() {
  const personalProjectsKeys = [
      "triviamania",
      "estore",
      "randomstuff",
      "spots",
      "portfolio",
      "bmwi5",
    ],
    cloneProjectsKeys = ["airbnb", "amazon", "game-info", "qrates"],
    personalParams = personalProjectsKeys.map((title) => ({
      params: {
        title,
        query: "personal",
      },
    })),
    cloneParams = cloneProjectsKeys.map((title) => ({
      params: {
        title,
        query: "clones",
      },
    }));

  return personalParams.concat(cloneParams);
}

const { title, query } = Astro.params,
  projectInfo = allProjects[query][title],
  images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/projects/*/**"
  ),
  titleImages = Object.keys(images)
    .filter((image) => image.includes(title))
    .map((image) => images[image]);
---

<style>
  .project-details {
    opacity: 0;
  }
</style>

<RootLayout title={projectInfo.title}>
  <main
    class="w-full py-6 md:px-16 md:py-10 lg:px-40 lg:py-16 space-y-6 relative"
  >
    <a
      class="absolute -top-1 md:top-0 md:text-xl hover:underline-offset-4 underline underline-offset-2 slideInDown"
      href="/projects">All projects</a
    >

    <h1
      class="text-xl font-bold sm:text-2xl md:text-3xl lg:text-4xl slideInDown opacity-0"
      style="animation-delay: 0.3s;"
    >
      {projectInfo.title}
    </h1>

    {
      (projectInfo.live || projectInfo.source) && (
        <div class="flex justify-between links">
          {projectInfo.live && (
            <a
              aria-label={`Visit ${projectInfo.title}`}
              class="label flex gap-2 items-center md:text-lg bg-neutral-600 px-2 rounded-sm hover:text-emerald-400 border-transparent hover:bg-transparent border-2 hover:border-emerald-400 slideInDown opacity-0"
              target="_blank"
              href={projectInfo.live}
              style="animation-delay: 0.6s;"
            >
              <ExternalLinkIcon />
              <span class="uppercase text-sm tracking-widest">
                Visit project
              </span>
            </a>
          )}

          {projectInfo.source && (
            <a
              aria-label={`View the source code for ${projectInfo.title}`}
              class="flex gap-2 items-center md:text-lg hover:text-emerald-400 group relative slideInDown opacity-0"
              style={`animation-delay: ${projectInfo.live ? "0.8s" : "0.6s"}`}
              target="_blank"
              href={projectInfo.source}
            >
              <span
                aria-hidden="true"
                class="absolute left-1/2 -translate-x-1/2 bottom-0 opacity-0 group-hover:opacity-100 group-hover:bottom-full whitespace-nowrap label"
              >
                Source Code
              </span>
              <GithubIcon />
            </a>
          )}
        </div>
      )
    }

    <ImageCarousel images={titleImages} />

    <section class="project-details">
      <h2 class="font-bold text-lg md:text-xl lg:text-2xl">
        About this project
      </h2>

      <section class="space-y-1 md:text-lg lg:text-xl">
        {projectInfo.description.split("\n").map((text) => <p>{text}</p>)}
      </section>
    </section>

    {
      projectInfo.features && (
        <section class="project-details">
          <h2 class="font-bold text-lg md:text-xl lg:text-2xl">Features</h2>

          <ul class="md:text-lg lg:text-xl">
            {projectInfo.features.map((text) => (
              <li class="list-disc ml-4">{text}</li>
            ))}
          </ul>
        </section>
      )
    }

    <section class="project-details">
      <h2 class="font-bold text-lg md:text-xl lg:text-2xl">
        This project was built using
      </h2>

      <ul class="md:text-lg lg:text-xl">
        {
          projectInfo.techStack.map((text) => (
            <li class="list-disc ml-4">{text}</li>
          ))
        }
      </ul>
    </section>

    {
      projectInfo.technicalDetails && (
        <section>
          <h2 class="font-bold text-lg md:text-xl lg:text-2xl project-details">
            Technical details
          </h2>

          <ul class="space-y-2 md:text-lg lg:text-xl">
            {projectInfo.technicalDetails.map((detail) =>
              detail
                .split("\n")
                .map((text) => (
                  <li class="list-disc ml-4 project-details">{text}</li>
                ))
            )}
          </ul>
        </section>
      )
    }
  </main>
</RootLayout>

<script>
  // Define a custom interface for Intersection Observer Options
  interface IntersectionObserverOptions {
    root?: Element | null;
    rootMargin?: string;
    threshold?: number | number[];
  }

  // Callback function to be executed when the observed elements intersect
  const callback: IntersectionObserverCallback = (entries, observer) => {
    entries.forEach((entry, i) => {
      const className = "slideInUp";

      if (entry.isIntersecting) {
        if (entry.target instanceof HTMLElement) {
          entry.target.style.animationDelay = `${i * 0.25}s`;
        }
        entry.target.classList.add(className);
        observer.unobserve(entry.target);
      } else {
        entry.target.classList.remove(className);
      }
    });
  };

  // Get all elements with class 'box'
  const boxes: NodeListOf<Element> =
    document.querySelectorAll(".project-details");

  // Options for the IntersectionObserver
  const options: IntersectionObserverOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.5,
  };

  // Create a new IntersectionObserver with the callback and options
  const observer: IntersectionObserver = new IntersectionObserver(
    callback,
    options
  );

  // Loop through each box and observe it
  boxes.forEach((box) => {
    observer.observe(box);
  });
</script>
